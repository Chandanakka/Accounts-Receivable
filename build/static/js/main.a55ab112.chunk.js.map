{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["FormDataExample","Component","constructor","props","super","this","handleglreceiptchequenoChange","e","setState","glreceiptchequeno","target","value","handlegldateChange","gldate","handleglreceipttypeChange","glreceipttype","handleglreceivedfromChange","glreceivedfrom","handleglreceivedamountChange","glreceivedamount","handleImageChange","selectedImage","files","handleSubmit","preventDefault","formData","FormData","append","state","fetch","method","mode","body","then","response","ok","Error","concat","status","json","responseData","console","log","message","catch","error","handleClearSubmit","glimage","current","React","createRef","render","createElement","className","onSubmit","htmlFor","type","id","onChange","accept","ref","onClick","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","StrictMode","App"],"mappings":"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","file":"static/js/main.a55ab112.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './MyForm.css'; // Import your CSS file\n\nclass FormDataExample extends Component {\n  constructor(props) {\n    super(props);\n    this.glimage = React.createRef();\n    this.state = {\n      glreceiptchequeno: '',\n      gldate: '',\n      glreceipttype: '',\n      glreceivedfrom: '',\n      glreceivedamount: '',\n      glimage: null,\n      message:''\n    };\n  }\n\n  handleglreceiptchequenoChange = (e) => {\n    this.setState({ glreceiptchequeno: e.target.value });\n  };\n  handlegldateChange = (e) => {\n    this.setState({ gldate: e.target.value });\n  };\n  handleglreceipttypeChange = (e) => {\n    this.setState({ glreceipttype: e.target.value });\n  };\n  handleglreceivedfromChange = (e) => {\n    this.setState({ glreceivedfrom: e.target.value });\n  };\n  handleglreceivedamountChange = (e) => {\n    this.setState({ glreceivedamount: e.target.value });\n  };\n  handleImageChange = (e) => {\n    this.setState({ selectedImage: e.target.files[0] });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Create a FormData object and append the string and image to it.\n    const formData = new FormData();\n    formData.append('glreceiptchequeno', this.state.glreceiptchequeno);\n    formData.append('gldate', this.state.gldate);\n    formData.append('glreceipttype', this.state.glreceipttype);\n    formData.append('glreceivedfrom', this.state.glreceivedfrom);\n    formData.append('glreceivedamount', this.state.glreceivedamount);\n    formData.append('glimage', this.state.selectedImage);\n    fetch('http://192.168.0.179:8080/AccountsReceivable', {\n        method: 'POST',\n        mode: 'no-cors',\n        body: formData\n    })\n        .then((response) => {\n        if (!response.ok) {\n          // Check for error status and throw an error\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json(); // Parse the response body as JSON\n      })\n      .then((responseData) => {\n        // Handle successful response data here\n        console.log('Response Data:', responseData);\n        this.setState({message: 'Response Data:'+ responseData});\n      })\n      .catch((error) => {\n        // Handle any errors that occurred during the fetch\n        console.error('Error posting data:', error.message);\n        this.setState({ message: 'Error posting data:'+ error.message});\n      });\n  };\n  handleClearSubmit= (e) => {\n    this.setState({ glreceiptchequeno:''});\n    this.setState({ gldate: null});\n    this.setState({ glreceipttype:''});\n    this.setState({ glreceivedfrom: ''});\n    this.setState({ glreceivedamount: ''});\n//    this.setState({ glimage: null});\n//    this.setState({ selectedImage: ''});\n    this.setState({ message: ''});\n    this.glimage.current.value='';\n  };\n\n  render() {\n\n    return (\n      <div className=\"accounts-receivables\">\n      <div className=\"transaction-form\">\n       <div className=\"accounts-receivables\"><h2>ACCOUNTS RECEIVABLES-accountsreceivable</h2></div>\n         <form onSubmit={this.handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"glreceiptchequeno\"><b> Cheque/Receipt No:</b></label>\n            <input className=\"form-control\"\n              type=\"text\"\n              id=\"glreceiptchequeno\"\n              value={this.state.glreceiptchequeno}\n              onChange={this.handleglreceiptchequenoChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"gldate\"><b>Date:</b></label>\n            <input className=\"form-control\"\n              type=\"date\"\n              id=\"gldate\"\n              value={this.state.gldate || ''}\n              onChange={this.handlegldateChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"glreceipttype\"><b> Received For:</b></label>\n            <input className=\"form-control\"\n              type=\"text\"\n              id=\"glreceipttype\"\n              value={this.state.glreceipttype}\n              onChange={this.handleglreceipttypeChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"glreceivedfrom\"><b>Received From:</b></label>\n            <input className=\"form-control\"\n              type=\"text\"\n              id=\"glreceivedfrom\"\n              value={this.state.glreceivedfrom}\n              onChange={this.handleglreceivedfromChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"glreceivedamount\"><b>Received Amount:</b></label>\n            <input className=\"form-control\"\n              type=\"number\"\n              id=\"glreceivedamount\"\n              value={this.state.glreceivedamount}\n              onChange={this.handleglreceivedamountChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"glimage\"><b>Receipt/Cheque Image:</b></label>\n            <input className=\"form-control\"\n              type=\"file\"\n              id=\"glimage\"\n              accept=\"*\"\n              value={this.state.glimage}\n              ref={this.glimage}\n              onChange={this.handleImageChange}\n            />\n          </div>\n          <button1 className=\"btn btn-sm btn-primary\" onClick={this.handleSubmit}><b>Submit</b></button1>\n          <button2 className=\"btn btn-sm btn-primary\" onClick={this.handleClearSubmit}><b>Clear</b></button2>\n          <div>{this.state.message}</div>\n        </form>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default FormDataExample;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}